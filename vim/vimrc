" Init
" ------------------------------------------------------------------------------
set encoding=utf-8
scriptencoding utf-8

if !1 | finish | endif
if !&compatible | set nocompatible | endif

" viminfoの場所
if isdirectory(expand('~/.vim'))
    set viminfo+=n~/.vim/viminfo
endif

" *.unの場所
if isdirectory(expand('~/.vim/undo'))
    set undofile
    set undodir=~/.vim/undo
else
    set noundofile
endif



" Basic
" ------------------------------------------------------------------------------
set noswapfile                        " スワップファイルを作成しない
set nobackup                          " バックアップを作成しない
set backspace=indent,eol,start        " <BS>が削除する位置（インデント、行末、改行マタギ）
set list                              " 特殊文字を表示
set listchars=tab:\│\ ,trail:-        " 特殊文字のキャラクタ
set virtualedit=block                 " 自由な矩形選択
set expandtab                         " <Tab>をスペースに展開
set tabstop=4 shiftwidth=4            " <Tab>スペース展開文字幅
set shiftround                        " インデントをshiftwidthに丸める
set smarttab                          " 自動インデント
set autoindent                        " 改行後の自動インデント
set synmaxcol=300                     " 1行あたりのシンタックス有効文字数
set number                            " 行番号
set scrolloff=10                      " バッファスクロール時に上下10行を確保
set showmatch                         " 対応するカッコをハイライト
set matchtime=1                       " カッコ間移動時間
set display=lastline                  " 行が長くても表示
set splitright                        " 分割バッファを右に開く
set hidden                            " ファイルを保存しなくても新しいバッファを開く
set laststatus=2                      " ステータスラインを常に表示
set ruler                             " ステータスラインに現在行情報を表示
set showcmd                           " ステータスライン下に入力中コマンドを表示
set noshowmode                        " モードを表示しない
set cmdheight=2                       " コマンドラインの高さ
set wildmenu                          " コマンドライン補完
set wildignorecase                    " コマンドライン補完を大文字・小文字無視
set incsearch                         " インクリメンタルサーチ
set hlsearch                          " マッチ文字列をハイライト
set nowrapscan                        " 最後まで検索したら、最初のマッチ文字列に移動しない
set ignorecase                        " 検索文字列で大文字・小文字を区別しない
set smartcase                         " 検索文字列で大文字が混在している場合は区別する
set modeline                          " モードラインを有効
set modelines=5                       " モードラインを上下5行まで検索
set infercase                         " 補完時に大文字・小文字を区別しない
set textwidth=0                       " 行あたりの最大文字数？を0に（formatoptions）
set tags+=.git/tags                   " .gitにあるタグファイルも読む
set ttimeoutlen=10                    " キーシーケンス終了の待ち時間を短く
set nocursorline
set isk+=-

if (v:version == 704 && has('patch338')) || v:version >= 705
    " 折り返した行がインデントに沿う
    set breakindent
endif
if (v:version == 704 && has('patch1799')) || v:version >= 705
    " enable true color
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif



" Remap
" ------------------------------------------------------------------------------
nnoremap <Space> :
vnoremap <Space> :

" Yの挙動をC, Dと揃える
nnoremap Y y$

" 一文字削除は削除レジスタを使用
nnoremap x "_x
vnoremap x "_x

" かっこ
inoremap '' ''<C-G>U<Left>
inoremap "" ""<C-G>U<Left>
inoremap () ()<C-G>U<Left>
inoremap {} {}<C-G>U<Left>
inoremap [] []<C-G>U<Left>
inoremap <> <><C-G>U<Left>

" search
nnoremap <silent><Esc><Esc> :<C-u>nohlsearch<CR>
nnoremap n nzz
nnoremap N Nzz

" 挿入モード時のカーソル移動
inoremap <C-b> <C-G>U<Left>
inoremap <C-f> <C-G>U<Right>
inoremap <C-a> <C-G>U<Home>
inoremap <C-e> <C-G>U<End>
inoremap <C-k> <C-G>U<C-o>D

" visual mode
vnoremap v $h

" コマンドモード時のカーソル移動
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-k> <C-\>e getcmdpos() == 1 ? '' : getcmdline()[:getcmdpos()-2]<CR>

" ノーマルモード時に<CR>で改行
nnoremap <CR> o<esc>

" バッファ操作
nnoremap <silent><Space>vs :<C-u>vsp<CR>
nnoremap <silent><Space>sp :<C-u>sp<CR>
nnoremap <silent><Space>vn :<C-u>vnew<CR>
nnoremap <silent><Space>st :<C-u>tabnew<CR>
nnoremap <silent><Left> <C-w><
nnoremap <silent><Right> <C-w>>
nnoremap <silent><Tab> <C-w>w

" toggle relative line number and column highlight
nnoremap <silent><F3> :<C-u>setlocal relativenumber!<CR>
nnoremap <silent><F1> :<C-u><C-\>e'setlocal colorcolumn='.(&colorcolumn ? '' : '120')<CR><CR>
nnoremap <silent><leader>c :<C-u>setlocal cursorcolumn!<CR>

" help
nnoremap <C-h> :h<Space>

" echo file path
nnoremap <C-g> 1<C-g>

" <C-w>oを上書き
command! Big wincmd _ | wincmd |
nnoremap <silent><C-w>o :<C-u>Big<CR>

nnoremap ) ^

" *しても次の候補へ移動しないように
nnoremap * "zyiw:let @/ = @z<CR>:<C-u>set hlsearch<CR>

" ビジュアルモードで選択中のテキストを検索
vnoremap * "zy:let @/ = @z<CR>:<C-u>set hlsearch<CR>

" cしたときの元テキスト格納先レジスタを削除レジスタへ変更
nnoremap c "_c
vnoremap c "_c

" 縦分割でタグジャンプ
nnoremap <C-]> :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>

" 行を移動
map K <nop>
vnoremap K "zx<UP>"zP`[V`]
vnoremap J "zx"zp`[V`]



" File type
" ------------------------------------------------------------------------------
augroup my_filetype
    autocmd!
    autocmd FileType help nnoremap <silent><buffer>q :quit<CR>
    autocmd FileType help wincmd L
    autocmd FileType html,css,less,scss,ruby,yaml,javascript,vue setlocal tabstop=2 shiftwidth=2
    autocmd FileType php,php.rev setlocal noexpandtab tabstop=4 shiftwidth=4
    autocmd FileType html inoremap <buffer></ </<C-x><C-o>
    autocmd FileType markdown hi! def link markdownItalic Normal
    autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn} setlocal filetype=markdown
augroup END



" Statusline
" ------------------------------------------------------------------------------
augroup CopyHighlight
    autocmd!
    autocmd Colorscheme * hi! link TabLineSelFilename Comment
    autocmd Colorscheme * hi! link User1 ErrorMsg
augroup END

function! s:tabpageLabel(n) abort
    let isActiveTab = a:n is tabpagenr()

    let tabNo = (isActiveTab ? '%#TabLineSel#' : '%#TabLine#')
        \ . ' ' . a:n . ' ' . '%#TabLineFill#'

    let bufferList = tabpagebuflist(a:n)
    let activeBuffer = bufferList[tabpagewinnr(a:n) - 1]
    let activeFilename = pathshorten(bufname(activeBuffer))
    if activeFilename is ''
        let activeFilename = '[No Name]'
    endif
    if isActiveTab
        let activeFilename = '%#TabLineSelFilename#' . activeFilename
    endif

    return '%' . a:n . 'T' . ' ' . tabNo . ' ' . activeFilename . '%T' . '%#TabLineFill#'
endfunction

function! MakeTabline() abort
    return join(map(range(1, tabpagenr('$')), 's:tabpageLabel(v:val)'), '  ')
endfunction

function! MakeStatusLine() abort
    let l = ''
    let sp = ' ┊ '

    " left
    let ftSymbol = exists('*WebDevIconsGetFileTypeSymbol') ? WebDevIconsGetFileTypeSymbol() : ''
    let bufName = bufname('')
    if bufName == ''
        let bufName = '[No Name]'
    endif
    let bufName = strchars(bufName) > winwidth(0) * 0.6 ? pathshorten(bufName) : bufName
    let l .=
        \ (&modified ? '%1*' : '')
        \ . ' ' . ftSymbol . ' '
        \ . bufName

    " right
    let cp = getcurpos()
    let branch = fugitive#head('%')
    let l .=
        \ '%='
        \ . (branch == '' ? '' : branch . sp)
        \ . &ff . ':' . (&fenc == '' ? &enc : &fenc) . sp
        \ . cp[1] . ':' . cp[2] . ' '

    return l
endfunction

set statusline=%!MakeStatusLine()
set tabline=%!MakeTabline()



" Other
" ------------------------------------------------------------------------------
" Use vsplit mode (?)
" http://qiita.com/kefir_/items/c725731d33de4d8fb096
if has("vim_starting") && !has('gui_running') && has('vertsplit')
    function! g:EnableVsplitMode()
        " enable origin mode and left/right margins
        let &t_CS = "y"
        let &t_ti = &t_ti . "\e[?6;69h"
        let &t_te = "\e[?6;69l\e[999H" . &t_te
        let &t_CV = "\e[%i%p1%d;%p2%ds"
        call writefile([ "\e[?6;69h" ], "/dev/tty", "a")
    endfunction

    " old vim does not ignore CPR
    map <special> <Esc>[3;9R <Nop>

    " new vim can't handle CPR with direct mapping
    " map <expr> ^[[3;3R g:EnableVsplitMode()
    set t_F9=[3;3R
    map <expr> <t_F9> g:EnableVsplitMode()
    let &t_RV .= "\e[?6;69h\e[1;3s\e[3;9H\e[6n\e[0;0s\e[?6;69l"
endif

" 管理者権限で書き込み
if executable('sudo') && executable('tee')
    cnoremap w!! %!sudo tee > /dev/null %
endif

" Vimスクリプトの行継続のインデント幅
let g:vim_indent_cont = 4

" 挿入モードのクソみたいな挙動を切る
augroup no_comment
    autocmd!
    autocmd BufEnter * setlocal fo-=r
    autocmd BufEnter * setlocal fo-=o
    autocmd BufEnter * setlocal fo-=c
    autocmd BufEnter * setlocal fo-=t
    autocmd BufEnter * setlocal fo-=q
augroup END

" 全てのマッピングを表示
command! -nargs=* -complete=mapping AllMaps map <args> | map! <args> | lamp <args>

" カーソル行ハイライト時の特殊文字の色
augroup special_key_highlight
    autocmd!
    autocmd VimEnter,WinEnter * match NonText '^\s\+'
augroup END

" 外部でファイルが変更された場合（かつ、編集していない場合）は自動でリロードする
set autoread
augroup checktime
    autocmd!
    autocmd WinEnter * checktime
augroup END

" 挿入モードを抜けた際、強制的にペーストモードを解除する
augroup leave_paste_mode_auto
    autocmd!
    autocmd InsertLeave * set nopaste
augroup END

" 挿入モード時にカーソルの形状を変更する
if $TMUX == ''
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
else
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
endif

" リネーム
command! -nargs=1 -complete=file Rename f <args>|call delete(expand('#'))|w

if has('ruby')
    " 現在行以降にある関数の引数リストから関数phpdocを挿入
    function! InsertPHPFunctionDoc() abort
        ruby load Vim::evaluate('expand("~/.vim/ruby/insert_php_function_doc.rb")')
    endfunction
    nnoremap <silent><space>pf :call InsertPHPFunctionDoc()<CR>

    " 現在行にあるクラス名からプロパティphpdocを挿入
    function! InsertPHPPropertyDoc() abort
        ruby load Vim::evaluate('expand("~/.vim/ruby/insert_php_property_doc.rb")')
    endfunction
    nnoremap <silent><space>pp :call InsertPHPPropertyDoc()<CR>
endif

" dein.vim
let s:plugins_dir = expand('~/.vim/plugins/')
let s:dein_dir = s:plugins_dir . '/repos/github.com/Shougo/dein.vim'

if (isdirectory(s:dein_dir))
    let &rtp .= ',' . s:dein_dir
    if dein#load_state(s:plugins_dir)
        call dein#begin(s:plugins_dir)
        call dein#load_toml('~/dotfiles/vim/plugins.toml')
        call dein#end()
        call dein#save_state()
    endif

    if has('vim_starting') && dein#check_install()
        call dein#install()
    endif
endif



" Finish
" ------------------------------------------------------------------------------
" load .vimrc_local if file readable
if filereadable(expand('~/.vim/vimrc_local'))
    source ~/.vim/vimrc_local
endif

" enable filetype any custom
filetype plugin indent on

" enable syntax
syntax on

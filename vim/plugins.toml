[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
    set helplang=ja,en
'''

[[plugins]]
repo = 'kristijanhusak/vim-hybrid-material'
hook_add = '''
    if !has('gui_running') && !&termguicolors
        let g:hybrid_custom_term_colors = 1
    endif

    set fillchars+=vert:\ 
    set bg=dark

    augroup ModifyHybrid
        autocmd!
        autocmd VimEnter * nested colorscheme hybrid_reverse
        autocmd Filetype agit_diff hi! link agitDiffAdd ModeMsg
        autocmd Filetype agit_diff hi! link agitStatAdded ModeMsg
        autocmd Filetype agit_diff hi! link agitDiffRemove WarningMsg
        autocmd Filetype agit_diff hi! link agitStatRemoved WarningMsg
        autocmd Colorscheme hybrid_reverse hi! link TabLine StatusLineNC
        autocmd Colorscheme hybrid_reverse hi! link TabLineFill StatusLineNC
        autocmd Colorscheme hybrid_reverse hi! link TabLineSel StatusLine
        autocmd Colorscheme hybrid_reverse hi! link VertSplit ColorColumn
        autocmd Colorscheme hybrid_reverse hi! EndOfBuffer ctermfg=0 guifg=#1d1f21
        autocmd Colorscheme hybrid_reverse hi! link GitGutterAdd ModeMsg
        autocmd Colorscheme hybrid_reverse hi! link GitGutterChange diffRemoved
        autocmd Colorscheme hybrid_reverse hi! link GitGutterDelete WarningMsg
        autocmd Colorscheme hybrid_reverse hi! link GitGutterChangeDelete WarningMsg
        autocmd Colorscheme hybrid_reverse hi! NERDTreeDir ctermfg=0 guifg=#81a2be
        autocmd Colorscheme hybrid_reverse hi! NERDTreeDirSlash ctermfg=0 guifg=#81a2be
        autocmd Colorscheme hybrid_reverse hi! NERDTreeOpenable ctermfg=0 guifg=#1d1f21
        autocmd Colorscheme hybrid_reverse hi! NERDTreeClosable ctermfg=0 guifg=#1d1f21
        autocmd Colorscheme hybrid_reverse hi! StatusLine guifg=#a54242
        autocmd Colorscheme hybrid_reverse hi! StatusLineNC guifg=#373b41 guibg=#1d1f21
    augroup END
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = '844196/lightline-hybrid.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    nnoremap <C-n> :<C-u>NERDTreeToggle<CR>
    nnoremap <C-f> :<C-u>NERDTreeFind<CR>

    let g:NERDTreeMinimalUI = 1
    let g:NERDTreeMouseMode = 2
    let g:NERDTreeChDirMode = 1
    let g:NERDTreeHighlightCursorline = 0
    let g:NERDTreeIgnore = [
        \ 'node_modules',
        \ 'vendor',
        \ ]

    if dein#tap('vim-devicons')
        let g:webdevicons_enable_nerdtree = 1

        let g:DevIconsEnableFoldersOpenClose = 1
        let g:WebDevIconsUnicodeDecorateFolderNodes = 1
        let g:DevIconsDefaultFolderOpenSymbol = "\ue5fe\u00a0"
        let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = "\ue5ff\u00a0"

        let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol = "\uf0f6"
        let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
        let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['markdown'] = "\uf48a"
        let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = "\uf48a"

        let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
        let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
        let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
    endif
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    nnoremap <silent><space>h :<C-u>GitGutterLineHighlightsToggle<CR>
    nnoremap <silent><space>j :<C-u>GitGutterNextHunk<CR>
    nnoremap <silent><space>k :<C-u>GitGutterPrevHunk<CR>
'''

[[plugins]]
repo = 'rhysd/committia.vim'

[[plugins]]
repo = 'cohama/agit.vim'

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'kylef/apiblueprint.vim'

[[plugins]]
repo = 'tmux-plugins/vim-tmux'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'

[[plugins]]
repo = 'othree/yajs.vim'

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'digitaltoad/vim-pug'

[[plugins]]
repo = 'wavded/vim-stylus'

[[plugins]]
repo = 'timcharper/textile.vim'

[[plugins]]
repo = 'noprompt/vim-yardoc'

[[plugins]]
repo = 'sunaku/vim-ruby-minitest'

[[plugins]]
repo = 'vim-ruby/vim-ruby'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'

[[plugins]]
repo = 'AndrewRadev/linediff.vim'

[[plugins]]
repo = 'junegunn/goyo.vim'

[[plugins]]
repo = '844196/smarty-syntax'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'flyinshadow/php_localvarcheck.vim'
on_ft = 'php'
hook_add = '''
    let g:php_localvarcheck_enable = 1
    let g:php_localvarcheck_global = 0
'''

[[plugins]]
repo = 'simnalamburt/vim-mundo'
on_cmd = 'Mundo'
hook_add = '''
    let g:mundo_width = 80
    let g:mundo_height = 60
    nnoremap <silent><F5> :<C-u>MundoToggle<CR>
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
on_cmd = 'GoUpdateBinaries'
hook_add = '''
    let g:go_fmt_command = 'goimports'
    let g:go_fmt_autosave = 1
    let g:go_gocode_unimported_packages = 1
'''
hook_post_update = '''
    GoUpdateBinaries
'''

[[plugins]]
repo = 'Shougo/vimproc'
hook_post_update = '''
    let g:dein#plugin.build = 'make'
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_ft = 'markdown'
hook_add = '''
    let g:table_mode_corner='|'
    let g:table_mode_auto_align = 0
'''

[[plugins]]
repo = 'h1mesuke/vim-alignta'
on_cmd = 'Alignta'
hook_add = '''
    vnoremap <silent><C-p> :'<,'>Alignta <- $<CR>
'''

[[plugins]]
repo = '844196/previm'
rev = 'modified-for-me'
on_cmd = 'PrevimOpen'
hook_add = '''
    let g:previm_enable_realtime = 1
    let g:previm_disable_default_css = 0
    let g:previm_show_header = 0
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = '<Plug>(incsearch'
hook_add = '''
    let g:incsearch#magic = '\v'

    map / <Plug>(incsearch-forward)
    map ? <Plug>(incsearch-backward)
    map n <Plug>(incsearch-nohl-n)zz
    map N <Plug>(incsearch-nohl-N)zz
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = '<Plug>(anzu'
hook_add = '''
    nmap * "zyiw:let @/ = @z<CR>:<C-u>set hlsearch<CR><Plug>(anzu-update-search-status)
    vmap * "zy:let @/ = @z<CR>:<C-u>set hlsearch<CR><Plug>(anzu-update-search-status)
    nmap <silent><Esc><Esc> <Plug>(anzu-clear-search-status):<C-u>nohlsearch<CR>

    if dein#tap('incsearch.vim')
        map n <Plug>(incsearch-nohl-n)<Plug>(anzu-update-search-status)zz
        map N <Plug>(incsearch-nohl-N)<Plug>(anzu-update-search-status)zz
    endif
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'scss', 'less', 'vue']
hook_add = '''
    let g:user_emmet_settings = {
        \ 'lang' : 'ja',
        \ 'html': {'indentation': '  '},
        \ 'vue': {'indentation': '  '},
        \ }
'''

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
    let g:unite_enable_start_insert = 1
    let g:unite_enable_ignore_case = 1
    let g:unite_enable_smart_case = 1

    nnoremap <Leader>b :<C-u>Unite buffer<CR>
    nnoremap <Leader>t :<C-u>Unite tab<CR>

    function! DispatchUniteFileRecAsyncOrGit()
        if isdirectory(getcwd()."/.git")
            Unite file_rec/git:--cached
        else
            Unite file_rec/async
        endif
    endfunction
    nnoremap <Leader><Leader> :<C-u>call DispatchUniteFileRecAsyncOrGit()<CR>

    function! DispatchUniteGrepOrGit()
        if isdirectory(getcwd()."/.git")
            Unite grep/git:. -no-empty -buffer-name=search-buffer
        else
            Unite grep:. -no-empty -buffer-name=search-buffer
        endif
    endfunction
    nnoremap <Leader>g :<C-u>call DispatchUniteGrepOrGit()<CR>

    augroup unite_my_settings
        autocmd!
        autocmd Filetype unite nmap <silent><buffer><Esc><Esc> <Plug>(unite_exit)
        autocmd Filetype unite imap <silent><buffer><Esc><Esc> <Plug>(unite_exit)
        autocmd Filetype unite imap <silent><buffer><C-e> <End>
        autocmd Filetype unite imap <silent><buffer><C-k> <C-o>"_D
    augroup END

    if dein#tap('lightline.vim')
        let g:unite_force_overwrite_statusline = 0
    endif

    if dein#tap('vim-devicons')
        let g:webdevicons_enable_unite = 0
    endif

    " menu
    function! GetTestFilePath(origin) abort
        if match(a:origin, '^tests/') >= 0
            return a:origin
        endif

        let s:result = a:origin
        for [s:match_pattern, s:replace_pattern] in [['^src/', 'tests/'], ['\.php$', 'Test.php']]
            let s:result = substitute(s:result, s:match_pattern, s:replace_pattern, '')
        endfor

        return s:result
    endfunction
    let g:unite_source_menu_menus = {'shortcut': {}}
    let g:unite_source_menu_menus.shortcut.command_candidates = [
        \ ['Reopen search-buffer', 'UniteResume search-buffer'],
        \ ['Create quickrun rev snippet buffer', 'enew | 0r ~/.vim/templates/rev.template | set ft=php.rev | QuickRun'],
        \ ['Delete all buffer', '%bd'],
        \ ['Show make task', 'Unite make/help'],
        \ ['Run test', "execute '!phpunit ' . GetTestFilePath(expand('%'))"],
        \ ['Open test file', "execute 'vsplit ' . GetTestFilePath(expand('%'))"],
        \ ['Run diff test', '!make diff_test'],
        \ ['Paste mode on', 'set paste!'],
        \ ['Edit vimrc', 'edit $MYVIMRC'],
        \ ['Edit vimrc_local', 'edit ~/.vim/vimrc_local'],
        \ ['Formating markdown table', "'<,'>Alignta 0:0 |"],
        \ ['Tablize', "'<,'>Tableize"],
        \ ]
    noremap <silent>S :<C-u>Unite menu:shortcut<CR>

    " make/help
    let s:make_help_source = {
        \ 'name': 'make/help',
        \ 'syntax': 'uniteSource__Make_Help',
        \ 'hooks': {},
        \ }
    function! s:make_help_source.gather_candidates(args, context)
        let s:candidate_map = map(systemlist('make help'), '{
            \ "task": split(substitute(v:val, "\\e\\[[0-9;]\\+[mK]", "", "g"), "\\s\\{2,\\}")[0],
            \ "description": split(substitute(v:val, "\\e\\[[0-9;]\\+[mK]", "", "g"), "\\s\\{2,\\}")[1],
            \ }')
        let s:padding = max(map(copy(s:candidate_map), 'strlen(v:val.task)'))
        return map(copy(s:candidate_map), '{
            \ "word": printf("%-" . s:padding . "S  --  %s", v:val.task, v:val.description),
            \ "soruce": "make/help",
            \ "kind": "command",
            \ "action__command": (v:val.description =~ "[cC][lL][eE][aA][rR]" ? "!sudo make" : "!make") . " " . v:val.task,
            \ }')
    endfunction
    function! s:make_help_source.hooks.on_syntax(args, context)
        syntax match uniteSource__Make_Help_Task /[a-zA-Z_-]\+\ze\s*--/
            \ contained containedin=uniteSource__Make_Help
        highlight! default link uniteSource__Make_Help_Task ModeMsg
    endfunction
    call unite#define_source(s:make_help_source)

    " namespace
    inoremap <silent><C-x><C-x> <ESC>:<C-u>Unite file_rec/git:--cached::src/:tests/
        \ -default-action=continuous_insert -direction=botright -prompt-direction=top
        \ <CR>
    let s:action = {
        \ 'description': 'insert word, continuous insert mode',
        \ }
    function! s:action.func(candidate) abort
        let s:namespace = substitute(
            \ a:candidate.word, '^src/\(.*\)\.php', '\=tr(submatch(1), "/", "\\")', 'g'
            \ )
        let s:old_register = {
            \ 'type': getregtype('"'),
            \ 'value': getreg('"'),
            \ }
        call setreg('"', s:namespace, 'v')
        if (col('$') > 1 && col('.') != (col('$') - 1))
            execute 'normal! ""gp'
            startinsert
        else
            execute 'normal! ""p'
            startinsert!
        endif
        call setreg('"', s:old_register.value, s:old_register.type)
    endfunction
    call unite#custom#action('source/file_rec/git/*', 'continuous_insert', s:action)
'''

[[plugins]]
repo = 'Shougo/unite-outline'
hook_add = '''
    nnoremap <silent> U :<C-u>Unite outline -vertical -direction=belowright<CR>
'''

[[plugins]]
repo = 'kmnk/vim-unite-giti'
hook_add = '''
    nnoremap <silent> <leader>s :<C-u>Unite giti/status<CR>
    nnoremap <silent> <leader>d :<C-u>Unite giti/log<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
    imap <expr><C-k> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<C-G>U<C-o>D"
    smap <expr><C-k> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<C-G>U<C-o>D"
    xmap <expr><C-k> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<C-G>U<C-o>D"
    let g:neosnippet#snippets_directory = '~/.vim/snippets/'
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'soramugi/auto-ctags.vim'
on_cmd = 'Ctags'
hook_add = '''
    let g:auto_ctags = 0
    let g:auto_ctags_directory_list = ['.git']
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = '''
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_ignore_case = 1
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#enable_enable_camel_case_completion = 1
    let g:neocomplete#keyword_patterns = {}
    let g:neocomplete#keyword_patterns._ = '\h\w*'
    let g:neocomplete#max_list = 20
    let g:neocomplete#enable_fuzzy_completion = 0
    let g:neocomplete#enable_auto_delimiter = 1
    let g:neocomplete#delimiter_patterns = {
        \ 'php': ['->', '::', '\']
        \ }
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = {}
    let g:quickrun_config._ = {
        \ 'outputter/buffer/split': ':lefta vertical',
        \ 'outputter/buffer/close_on_empty': 0,
        \ 'runner': 'vimproc',
        \ 'runner/vimproc/updatetime': 60,
        \ }
    let g:quickrun_config['ruby.bundle'] = {
        \ 'command': 'bundle',
        \ 'cmdopt': 'exec ruby',
        \ 'exec': '%c %o %s'
        \ }
    let g:quickrun_config['php.rev'] = {
        \ 'command': './rev',
        \ 'cmdopt': 'exec',
        \ 'exec': '%c %o %s',
        \ }
    let g:quickrun_config.json = {
        \ 'outputter/buffer/filetype': 'json',
        \ 'command': 'jq',
        \ 'cmdopt': '.',
        \ 'exec': 'cat %s | sed "s/[\\]\"/\"/g" |  %c %o',
        \ }
    let g:quickrun_config.sql = {
        \ 'command': 'mysql-wrapper',
        \ 'exec': 'cat %s | %c',
        \ 'outputter/buffer/filetype': 'sqloutput',
        \ }

    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

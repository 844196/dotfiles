[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'osyo-manga/vim-precious'
if = 'v:false'
hook_add = '''
    let g:precious_enable_switchers = {
        \   '*': {
        \       'setfiletype': 1,
        \   },
        \   'help': {
        \       'setfiletype': 0,
        \   },
        \   'markdown': {
        \       'setfiletype': 0,
        \   },
        \ }
'''

[[plugins]]
if = 'v:false'
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
    set helplang=ja,en
'''

[[plugins]]
repo = 'kristijanhusak/vim-hybrid-material'
if = 'v:false'
hook_add = '''
    if !has('gui_running') && !&termguicolors
        let g:hybrid_custom_term_colors = 1
    endif

    set fillchars+=vert:│
    set bg=dark

    augroup ModifyColor
        autocmd VimEnter * nested colorscheme hybrid_reverse
        autocmd Colorscheme hybrid_reverse hi! link agitDiffAdd ModeMsg
        autocmd Colorscheme hybrid_reverse hi! link agitStatAdded ModeMsg
        autocmd Colorscheme hybrid_reverse hi! link agitDiffRemove WarningMsg
        autocmd Colorscheme hybrid_reverse hi! link agitStatRemoved WarningMsg
        autocmd Colorscheme hybrid_reverse hi! VertSplit guifg=#282a2e
        autocmd Colorscheme hybrid_reverse hi EndOfBuffer ctermfg=0 guifg=#1d1f21
        autocmd Colorscheme hybrid_reverse hi GitGutterAdd guifg=#5e8d87
        autocmd Colorscheme hybrid_reverse hi GitGutterChange guifg=#de935f
        autocmd Colorscheme hybrid_reverse hi GitGutterChangeDelete guifg=#de935f
        autocmd Colorscheme hybrid_reverse hi GitGutterDelete guifg=#a54242
        autocmd Colorscheme hybrid_reverse hi DiffAdd guibg=#3e5654 guifg=#8abeb7
        autocmd Colorscheme hybrid_reverse hi DiffChange guibg=#7e5940 guifg=#f0c674
        autocmd Colorscheme hybrid_reverse hi DiffText guibg=#7e5940 guifg=#f0c674 cterm=undercurl
        autocmd Colorscheme hybrid_reverse hi DiffDelete guibg=#613132 guifg=#cc6666
        autocmd Colorscheme hybrid_reverse hi GitGutterChangeDeleteLine guibg=#7e5940 guifg=#f0c674
        autocmd Colorscheme hybrid_reverse hi NERDTreeDir ctermfg=0 guifg=#81a2be
        autocmd Colorscheme hybrid_reverse hi NERDTreeDirSlash ctermfg=0 guifg=#81a2be
        autocmd Colorscheme hybrid_reverse hi NERDTreeOpenable ctermfg=0 guifg=#1d1f21
        autocmd Colorscheme hybrid_reverse hi NERDTreeClosable ctermfg=0 guifg=#1d1f21
        autocmd Colorscheme hybrid_reverse hi ALEError guifg=#c5c8c6 guibg=#a54242
        autocmd Colorscheme hybrid_reverse hi ALEErrorSign guifg=#a54242
        autocmd Colorscheme hybrid_reverse hi ALEWarning guifg=#c5c8c6 guibg=#de935f
        autocmd Colorscheme hybrid_reverse hi ALEWarningSign guifg=#de935f
    augroup END
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    nnoremap <C-n> :<C-u>NERDTreeToggle<CR>
    nnoremap <C-f> :<C-u>NERDTreeFind<CR>

    let g:NERDTreeMinimalUI = 1
    let g:NERDTreeMouseMode = 2
    let g:NERDTreeChDirMode = 1
    let g:NERDTreeHighlightCursorline = 0
    let g:NERDTreeIgnore = [
        \ 'node_modules',
        \ 'vendor',
        \ ]

    if dein#tap('vim-devicons')
        let g:webdevicons_enable_nerdtree = 1

        let g:DevIconsEnableFoldersOpenClose = 1
        let g:WebDevIconsUnicodeDecorateFolderNodes = 1
        let g:DevIconsDefaultFolderOpenSymbol = "\ue5fe\u00a0"
        let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = "\ue5ff\u00a0"

        let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol = "\uf0f6"
        let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
        let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['markdown'] = "\uf48a"
        let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = "\uf48a"

        let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
        let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
        let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
    endif
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    nnoremap <silent><space>h :<C-u>GitGutterLineHighlightsToggle<CR>
    nnoremap <silent><space>j :<C-u>GitGutterNextHunk<CR>
    nnoremap <silent><space>k :<C-u>GitGutterPrevHunk<CR>

    let g:gitgutter_sign_added = '│'
    let g:gitgutter_sign_modified = '│'
    let g:gitgutter_sign_removed = '│'
    let g:gitgutter_sign_modified_removed = '│'

    let g:gitgutter_async = 0
    let g:gitgutter_eager = 0
    let g:gitgutter_realtime = 0
'''

[[plugins]]
repo = 'rhysd/committia.vim'

[[plugins]]
repo = 'cohama/agit.vim'

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'kylef/apiblueprint.vim'

[[plugins]]
repo = 'tmux-plugins/vim-tmux'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'

[[plugins]]
repo = 'othree/yajs.vim'

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'digitaltoad/vim-pug'

[[plugins]]
repo = 'wavded/vim-stylus'

[[plugins]]
repo = 'timcharper/textile.vim'

[[plugins]]
repo = 'noprompt/vim-yardoc'

[[plugins]]
repo = 'sunaku/vim-ruby-minitest'

[[plugins]]
repo = 'vim-ruby/vim-ruby'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'

[[plugins]]
repo = 'AndrewRadev/linediff.vim'

[[plugins]]
repo = 'junegunn/goyo.vim'

[[plugins]]
repo = '844196/smarty-syntax'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'simnalamburt/vim-mundo'
on_cmd = 'Mundo'
hook_add = '''
    let g:mundo_width = 80
    let g:mundo_height = 60
    nnoremap <silent>U :<C-u>MundoToggle<CR>
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
on_cmd = 'GoUpdateBinaries'
hook_add = '''
    let g:go_fmt_command = 'goimports'
    let g:go_fmt_autosave = 1
    let g:go_gocode_unimported_packages = 1
'''
hook_post_update = '''
    GoUpdateBinaries
'''

[[plugins]]
repo = 'Shougo/vimproc'
if = 'v:false'
hook_post_update = '''
    let g:dein#plugin.build = 'make'
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
if = 'v:false'
on_ft = 'markdown'
hook_add = '''
    let g:table_mode_corner='|'
    let g:table_mode_auto_align = 0
'''

[[plugins]]
repo = 'h1mesuke/vim-alignta'
on_cmd = 'Alignta'
hook_add = '''
    vnoremap <silent><C-p> :'<,'>Alignta <- $<CR>
'''

[[plugins]]
repo = '844196/previm'
rev = 'modified-for-me'
on_cmd = 'PrevimOpen'
hook_add = '''
    let g:previm_enable_realtime = 1
    let g:previm_disable_default_css = 0
    let g:previm_show_header = 0
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
if = 'v:false'
on_map = '<Plug>(incsearch'
hook_add = '''
    let g:incsearch#magic = '\v'

    map / <Plug>(incsearch-forward)
    map n <Plug>(incsearch-nohl-n)zz
    map N <Plug>(incsearch-nohl-N)zz
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'scss', 'less', 'vue']
hook_add = '''
    let g:user_emmet_settings = {
        \ 'lang' : 'ja',
        \ 'html': {'indentation': '  '},
        \ 'vue': {'indentation': '  '},
        \ }
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
    imap <expr><C-k> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<C-G>U<C-o>D"
    smap <expr><C-k> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<C-G>U<C-o>D"
    xmap <expr><C-k> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<C-G>U<C-o>D"
    let g:neosnippet#snippets_directory = $XDG_CONFIG_HOME . '/nvim/snippets'
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = {}
    let g:quickrun_config._ = {
        \ 'outputter/buffer/split': ':lefta vertical',
        \ 'outputter/buffer/close_on_empty': 0,
        \ 'tempfile': '%{expand("%:p:h") . "/" . NuuidNewUuid()}',
        \ }
    let g:quickrun_config['ruby.bundle'] = {
        \ 'command': 'bundle',
        \ 'cmdopt': 'exec ruby',
        \ 'exec': '%c %o %s'
        \ }
    let g:quickrun_config.json = {
        \ 'outputter/buffer/filetype': 'json',
        \ 'command': 'jq',
        \ 'cmdopt': '.',
        \ 'exec': 'cat %s | sed "s/[\\]\"/\"/g" |  %c %o',
        \ }
    let g:quickrun_config.sql = {
        \ 'command': 'mysql-wrapper',
        \ 'exec': 'cat %s | %c',
        \ 'outputter/buffer/filetype': 'sqloutput',
        \ }
    let g:quickrun_config['php.unit'] = {
        \ 'command': 'phpunit',
        \ 'cmdopt': '',
        \ 'exec': '%c %s',
        \ 'outputter/buffer/filetype': 'phpunit-result',
        \ }

    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
    nnoremap <silent><Leader>t :<C-u>execute 'QuickRun php.unit -srcfile ' . GetTestFilePath(expand('%'))<CR>
'''

[[plugins]]
repo = 'lilydjwg/colorizer'
if = 'v:false'

[[plugins]]
repo = '844196/vim-splash'
rev = 'modified-for-me'
hook_add = '''
    let g:splash#path = expand('~/dotfiles/vim/splash/chara')
'''

[[plugins]]
repo = 'machakann/vim-highlightedyank'
hook_add = '''
    let g:highlightedyank_highlight_duration = 120
    hi! link HighlightedyankRegion SpellLocal
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
    let g:fzf_layout = {
        \ 'down': '10'
        \ }
    let $FZF_DEFAULT_OPTS .= ' --no-height'

    autocmd! FileType fzf
    autocmd  FileType fzf set laststatus=0 noshowmode noruler
      \| autocmd BufLeave <buffer> set laststatus=2 noshowmode noruler

    function! GetClass(path) abort
        " pclass: ~/bin/pclass
        return substitute(system('pclass ' . expand(a:path)), "\n", '', 'g')
    endfunction
    function! SetClass(path) abort
        let s:old_register = {
            \ 'type': getregtype('"'),
            \ 'value': getreg('"'),
            \ }
        call setreg('"', GetClass(a:path), 'v')
        if (col('$') > 1 && col('.') != (col('$') - 1))
            execute 'normal! ""gp'
            startinsert
        else
            execute 'normal! ""p'
            startinsert!
        endif
        call setreg('"', s:old_register.value, s:old_register.type)
    endfunction
    function! SetClasses(paths) abort
        call vimrc#php#buffer#addUses(map(a:paths, {_, p -> 'use ' . GetClass(p) . ';'}))
    endfunction

    " カレントディレクトリ以下のファイル全て
    nnoremap <silent><Leader><Leader> :<C-u>FZF<CR>
    " Git管理下ファイル + untracked
    nnoremap <silent><Leader>s :<C-u>GFiles?<CR>
    " 開いてるバッファ
    nnoremap <silent><Leader>b :<C-u>Buffers<CR>
    " Ag
    nnoremap <Leader>g :<C-u>Ag 
    " PHPクラス名補完 (use一括挿入と挿入モード用useなしバージョン)
    nnoremap <silent><C-x><C-x> :<C-u>call fzf#run(fzf#wrap('files', {'source': "ag -u -g '\.php$' \| ag -v 'Test\.php$'", 'sink*': function('SetClasses')}))<CR>
    inoremap <silent><C-x><C-x> <Esc>:<C-u>call fzf#run(fzf#wrap('files', {'source': "ag -u -g '\.php$' \| ag -v 'Test\.php$'", 'sink': function('SetClass')}))<CR>

    function! GetTestFilePath(origin) abort
        if match(a:origin, '^tests/') >= 0
            return a:origin
        endif

        let s:result = a:origin
        for [s:match_pattern, s:replace_pattern] in [['^src/', 'tests/'], ['\.php$', 'Test.php']]
            let s:result = substitute(s:result, s:match_pattern, s:replace_pattern, '')
        endfor

        return s:result
    endfunction
    function! CreateOrOpenTestFile(src) abort
        let s:test = a:src
        for [s:match_pattern, s:replace_pattern] in [['^src/', 'tests/'], ['\.php$', 'Test.php']]
            let s:test = substitute(s:test, s:match_pattern, s:replace_pattern, '')
        endfor

        if !filereadable(s:test)
            call vimrc#vim#mkdirp(fnamemodify(s:test, ':p:h'))
        endif

        execute 'vsplit ' . s:test
    endfunction
    let g:fzf_menu_commands = {
        \ 'Open test file': 'call CreateOrOpenTestFile(expand("%"))',
        \ 'Paste mode on': 'set paste!',
        \ 'Edit vimrc': 'edit ~/dotfiles/vim/vimrc',
        \ 'Edit local vimrc': 'edit ~/.local/vimrc',
        \ 'Edit plugins.toml': 'edit ~/dotfiles/vim/plugins.toml',
        \ }
    function! Invoker(key) abort
        call vimrc#vim#invokeCommand(g:fzf_menu_commands[a:key])
    endfunction
    nnoremap <silent>?? :<C-u>call fzf#run(fzf#wrap('', {
        \ 'source': keys(g:fzf_menu_commands),
        \ 'sink': function('Invoker'),
        \ }))
        \ <CR>

    " ghq list open by nerdtree
    command! GP call fzf#run(fzf#wrap({'source': 'ghq list --full-path', 'sink': 'e'}))
'''

[[plugins]]
repo = 'kchmck/vim-coffee-script'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_php_phpcs_standard = 'ruleset.xml'
    let g:ale_php_phpmd_ruleset = 'phpmd.xml'
    let g:ale_sign_error = "\uf057"
    let g:ale_sign_warning = "\uf06a"
    let g:ale_lint_delay = 1000
    let g:ale_completion_enabled = 0

    let g:ale_lint_on_text_changed = 0
    let g:ale_lint_on_enter = 1
    let g:ale_lint_on_save = 1
    let g:ale_lint_on_filetype_changed = 1
    let g:ale_lint_on_insert_leave = 1
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    function! StatuslineFilename() abort
        let name = expand('%')

        if name == ''
            return '[No Name]'
        endif

        if expand('%:p') !~# getcwd()
            let name = substitute(expand('%:p'), '^' . $HOME, '~', '')
        endif

        if strchars(name) >= winwidth(0)
            let name = pathshorten(name)
        endif

        return name
    endfunction

    function! TablineFilename(tabnum) abort
        let bufferList = tabpagebuflist(a:tabnum)
        let activeBuffer = bufferList[tabpagewinnr(a:tabnum) - 1]
        let activeFilename = expand('#' . activeBuffer . ':t')

        if activeFilename == ''
            let activeFilename = '[No Name]'
        endif

        let s:MAX_DISPLAY_WIDTH = 26
        let s:OVERFLOW_ELLIPSIS = '…'

        if strdisplaywidth(activeFilename) <= s:MAX_DISPLAY_WIDTH
            return printf('%-' . s:MAX_DISPLAY_WIDTH . 'S', activeFilename)
        else
            let s:c = 0
            let s:s = ''
            for s:char in split(activeFilename, '\zs')
                if s:c + strdisplaywidth(s:char) < s:MAX_DISPLAY_WIDTH
                    let s:c += strdisplaywidth(s:char)
                    let s:s .= s:char
                else
                    return printf('%-' . s:MAX_DISPLAY_WIDTH . 'S', s:s . s:OVERFLOW_ELLIPSIS)
                endif
            endfor
        endif
    endfunction

    function! TablineWebdevicon(tabnum) abort
        let bufferList = tabpagebuflist(a:tabnum)
        let activeBuffer = bufferList[tabpagewinnr(a:tabnum) - 1]
        let activeFilename = bufname(activeBuffer)

        return WebDevIconsGetFileTypeSymbol(activeFilename)
    endfunction

    let g:lightline = {
        \ 'active': {
        \     'left': [
        \         ['statuslineFilename'],
        \         ['isModified'],
        \         ['isNotModified'],
        \     ],
        \     'right': [[
        \         'fileformat',
        \         'fileencoding',
        \         'filetype',
        \     ]],
        \ },
        \ 'inactive': {
        \     'left': [
        \         ['statuslineFilename'],
        \         ['isModified'],
        \         ['isNotModified'],
        \     ],
        \     'right': [],
        \ },
        \ 'tab': {
        \     'active': [
        \         'tablineWebdevicon',
        \         'tablineFilename',
        \         'modified',
        \     ],
        \     'inactive': [
        \         'tablineWebdevicon',
        \         'tablineFilename',
        \         'modified',
        \     ],
        \ },
        \ 'component': {
        \     'isModified': '%{(&modifiable && &modified) ? "\uf444" : ""}',
        \     'isNotModified': '%{(&modifiable && (&modified == v:false)) ? "\uf444" : ""}',
        \ },
        \ 'component_function': {
        \     'statuslineFilename': 'StatuslineFilename',
        \     'webdevicon': 'WebDevIconsGetFileTypeSymbol',
        \ },
        \ 'tab_component_function': {
        \     'tablineFilename': 'TablineFilename',
        \     'tablineWebdevicon': 'TablineWebdevicon',
        \ },
        \ 'colorscheme': 'iceberg',
        \ 'separator': {
        \     'left': '',
        \     'right': '',
        \ },
        \ 'subseparator': {
        \     'left': '',
        \     'right': '',
        \ },
        \ }
'''

[[plugins]]
repo = 'roxma/nvim-completion-manager'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
    let g:deoplete#enable_smart_case = 0
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#auto_complete_delay = 500
    let g:deoplete#auto_complete_start_length = 1
    let g:deoplete#omni#input_patterns = {}
    let g:deoplete#omni#input_patterns.php = '\w+|[^. \t]->\w*|\w+::\w*'
    let g:deoplete#file#enable_buffer_path = 0
'''

[[plugins]]
repo = 'kassio/neoterm'

[[plugins]]
repo = 'kburdett/vim-nuuid'

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
    set fillchars+=vert:│
    set bg=dark

    function! ModifyIceberg() abort
        hi LineNr guibg=#161821
        hi GitGutterAdd guibg=#161821
        hi GitGutterChange guibg=#161821
        hi GitGutterChangeDelete guibg=#161821
        hi GitGutterDelete guibg=#161821
        hi VertSplit guifg=#272c42 guibg=#161821
        hi EndOfBuffer guifg=#161821
        hi StatusLine guifg=#181a27 guibg=#3e445e
        hi StatusLineNC guifg=#181a27
        hi NonText guifg=#242940
        hi NERDTreeDir guifg=#84a0c6
        hi NERDTreeDirSlash guifg=#84a0c6
        hi NERDTreeOpenable guifg=#161821
        hi NERDTreeClosable guifg=#161821
    endfunction

    augroup MyColor
        autocmd VimEnter * nested colorscheme iceberg
        autocmd colorscheme iceberg call ModifyIceberg()
    augroup END

    let g:fzf_colors = {
        \ 'hl': ['fg', 'Error'],
        \ 'hl+': ['fg', 'Error'],
        \ 'bg+': ['bg', 'Normal'],
        \ 'pointer': ['fg', 'Error'],
        \ 'marker': ['fg', 'Error'],
        \ 'info': ['fg', 'MoreMsg'],
        \ 'spinner': ['fg', 'MoreMsg'],
        \ 'prompt': ['fg', 'Operator'],
        \ }

    let s:p = {'normal': {}, 'inactive': {}, 'tabline': {}}
    let s:p.normal.left = [
        \ ['#818596', '#1e2132', 0, 0],
        \ ['#e27878', '#1e2132', 0, 0],
        \ ['#b4be82', '#1e2132', 0, 0],
        \ ]
    let s:p.normal.middle = [['#818596', '#1e2132', 0, 0]]
    let s:p.normal.right = s:p.normal.middle
    let s:p.inactive.left = [
        \ ['#3e445e', '#181a27', 0, 0],
        \ ['#53343b', '#181a27', 0, 0],
        \ ['#45493e', '#181a27', 0, 0],
        \ ]
    let s:p.inactive.middle = [['#3e445e', '#181a27', 0, 0]]
    let s:p.inactive.right = s:p.inactive.middle
    let s:p.tabline.tabsel = [['#818596', '#1d1f2b', 0, 0]]
    let s:p.tabline.left = [['#3e445e', '#161821', 0, 0]]
    let s:p.tabline.middle = [['#161821', '#161821', 0, 0]]
    let s:p.tabline.right = s:p.tabline.middle
    let g:lightline#colorscheme#iceberg#palette = s:p
'''

[[plugins]]
repo = 'cocopon/colorswatch.vim'

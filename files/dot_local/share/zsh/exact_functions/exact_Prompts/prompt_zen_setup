# vim: set ft=zsh:

__PSVAR_IDX_INCOGNITO=1
__PSVAR_IDX_PWD=2
__PSVAR_IDX_GIT_BRANCH=3
__PSVAR_IDX_GIT_DIRTY=4
__PSVAR_IDX_GIT_NO_MERGES=5
__PSVAR_IDX_GIT_REMOTE_AHEAD=6
__PSVAR_IDX_GIT_REMOTE_BEHIND=7
__PSVAR_IDX_GIT_USER=8
__PSVAR_IDX_GIT_USER_WARNING=9

prompt_zen_help() {
  cat <<'EOF'
Usage:
  prompt zen [instant-pre|instant-post]

Note:
  プロンプトにはNerdFont (i.e. 非ASCII文字) が含まれる。
  文字参照の関係上 LC_CTYPE には en_US.UTF-8 などの非POSIXロケールを設定しておくこと。
  (未設定の場合 "character not in range" エラーが発生する)
EOF
}

prompt_zen_setup() {
  autoload -Uz add-zsh-hook

  local SGR_DIM_START=$'\e[2m'
  local SGR_DIM_RESET=$'\e[22m'
  local ROUNDY_OPEN=$'\ue0b6'
  local ROUNDY_CLOSE=$'\ue0b4'
  local CHEVRON=$'\u276f'
  local GIT_NO_MERGES=$'\u2aef'
  local GIT_REMOTE_AHEAD=$'\u21e1'
  local GIT_REMOTE_BEHIND=$'\u21e3'
  local INCOGNITO_SYMBOL='󰗹 '

  # iceberg
  # local S0_BG='#353a50'
  # local S0_FG='15'
  # local S1_BG='#262939'
  # local S1_FG='8'
  # local S2_BG='#1e212d'
  # local S2_FG='5'
  # local S3_FG='8'

  # tokyonight
  local S0_BG='#353a50'
  local S0_FG='15'
  local S1_BG='#212736'
  local S1_FG='#51597d'
  local S2_BG='#1d2230'
  local S2_FG='#bb9af7'
  local S3_FG='#51597d'

  local ps1=(
    $'\n'
    "%(${__PSVAR_IDX_INCOGNITO}V.%F{$S0_BG}${ROUNDY_OPEN}%f%K{$S0_BG} %F{$S0_FG}${INCOGNITO_SYMBOL}%f %K{${S1_BG}}%F{$S0_BG}${ROUNDY_CLOSE}%f.%F{$S1_BG}${ROUNDY_OPEN}%f%K{$S1_BG})"
      "%(${__PSVAR_IDX_INCOGNITO}V. .) %F{${S1_FG}}%${__PSVAR_IDX_PWD}v%f %(${__PSVAR_IDX_INCOGNITO}V. .)"
    "%K{$S2_BG}%F{$S1_BG}${ROUNDY_CLOSE}%f"
      "%(${__PSVAR_IDX_GIT_BRANCH}V.  %F{${S2_FG}}%${__PSVAR_IDX_GIT_BRANCH}v%f%(${__PSVAR_IDX_GIT_DIRTY}V. %F{15}*%f. ) . )"
    "%k%F{$S2_BG}${ROUNDY_CLOSE}%f"
      " %F{${S3_FG}}%{${SGR_DIM_START}%}"
      "%(${__PSVAR_IDX_GIT_NO_MERGES}V.${GIT_NO_MERGES} .)"
      "%(${__PSVAR_IDX_GIT_REMOTE_AHEAD}V.${GIT_REMOTE_AHEAD} .)"
      "%(${__PSVAR_IDX_GIT_REMOTE_BEHIND}V.${GIT_REMOTE_BEHIND}.)"
      "%f%{${SGR_DIM_RESET}%}"
    $'\n'
    "%(?.%F{8}.%F{9})%(!.#.${CHEVRON})%f "
  )
  PS1=${(j..)ps1}
  RPS1="%(${__PSVAR_IDX_GIT_USER_WARNING}V.%F{1}.%F{8})%{${SGR_DIM_START}%}%(${__PSVAR_IDX_GIT_USER}V.%${__PSVAR_IDX_GIT_USER}v.)%{${SGR_DIM_RESET}%}%f"

  export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --prompt '$CHEVRON '"

  # https://gist.github.com/romkatv/8b318a610dc302bdbe1487bb1847ad99
  case $1 in
    (instant-pre)
      [[ -t 0 && -t 1 && -t 2 ]] || return

      unsetopt PROMPT_CR PROMPT_SP

      __clear_instant_ps1() {
        setopt PROMPT_CR PROMPT_SP
        print -rn $'\e[?25l\e8\e[0m\e[J\e[?25h'
        add-zsh-hook -d precmd __clear_instant_ps1
        unfunction __clear_instant_ps1
      }

      psvar=('' "$(prompt_zen_pwd)")
      print -rn -- $'\e7'${(%)PS1}
      return
      ;;
    (instant-post)
      if [[ "${+functions[__clear_instant_ps1]}" == 1 ]]; then
        add-zsh-hook precmd __clear_instant_ps1
      fi
      return
      ;;
  esac

  add-zsh-hook precmd prompt_zen_precmd
  zle -N prompt_zen_async_callback

  # PROMPT_CR と PROMPT_SP は __clear_instant_ps1() で有効化されるので、ここではセットしない
  # セットするとインスタントプロンプト消去時に PROMPT_EOL_MARK が表示されて表示が崩れてしまう
  prompt_opts=(percent)
}

prompt_zen_precmd() {
  {
    psvar=()
    psvar[$__PSVAR_IDX_INCOGNITO]=${INCOGNITO:+1}
    psvar[$__PSVAR_IDX_PWD]="$(prompt_zen_pwd)"

    local fd_main fd_sub

    exec {fd_main}< <(prompt_zen_async_git-stauts)
    zle -Fw $fd_main prompt_zen_async_callback

    exec {fd_sub}< <(prompt_zen_async_git-user)
    zle -Fw $fd_sub prompt_zen_async_callback
  } always {
    # Ensure next hook will run
    # see: https://zsh.sourceforge.io/Doc/Release/Functions.html#index-hook-functions
    :
  }
}

prompt_zen_async_git-stauts() {
  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    return
  fi

  emulate -L zsh
  setopt EXTENDED_GLOB

  local fd_git_status fd_git_no_merges

  {
    exec {fd_git_status}< <(
      # Avoid index update (i.e. .git/index.lock remain)
      # see: https://git-scm.com/docs/git-status#_background_refresh
      git --no-optional-locks status --branch --porcelain=2 -unormal 2>/dev/null
    )

    local statuses=("${(f)"$(<&${fd_git_status})"}")
    local current_branch=${statuses[(r)\# branch.head *]#\# branch.head }

    # Depends $current_branch
    exec {fd_git_no_merges}< <(
      # Git aliases was very slow
      # local base_branch=$(git base-branch 2>/dev/null)
      local base_branch=$(git config "branch.${current_branch}.base" 2>/dev/null)

      if [[ -n "$base_branch" ]]; then
        local count=$(git rev-list --no-merges --count origin/${base_branch}..HEAD)
        if (( count > 0 )); then
          echo $count
        fi
      fi
    )

    local dirty=${${statuses:#\# *}:+1}
    local branch_ab=${statuses[(r)\# branch.ab *]}
    local ahead=${branch_ab[(ws. .r)+[1-9][0-9]#]#+}
    local behind=${branch_ab[(ws. .r)-[1-9][0-9]#]#-}
    local no_merges=$(<&${fd_git_no_merges})

    local chunks=(
      "${__PSVAR_IDX_GIT_BRANCH}:${current_branch}"
      "${__PSVAR_IDX_GIT_DIRTY}:${dirty}"
      "${__PSVAR_IDX_GIT_REMOTE_AHEAD}:${ahead}"
      "${__PSVAR_IDX_GIT_REMOTE_BEHIND}:${behind}"
      "${__PSVAR_IDX_GIT_NO_MERGES}:${no_merges}"
    )

    print -n -- ${(pj.\t.)chunks}
  } always {
    exec {fd_git_status}>&-
    exec {fd_git_no_merges}>&-
  }
}

prompt_zen_async_git-user() {
  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    return
  fi

  local fd_git_user fd_gh_user

  {
    exec {fd_git_user}< <(
      git config --local user.name 2>/dev/null
    )

    exec {fd_gh_user}< <(
      $GLOBAL_AQUA_ROOT_DIR/bin-copied/yq '."github.com".user' $XDG_CONFIG_HOME/gh/hosts.yml 2>/dev/null
    )

    local git_user=$(<&${fd_git_user})
    local gh_user=$(<&${fd_gh_user})

    local git_user_warning=
    if [[ "$git_user" != "$gh_user" ]]; then
      git_user_warning=1
    fi

    local chunks=(
      "${__PSVAR_IDX_GIT_USER}:${git_user}"
      "${__PSVAR_IDX_GIT_USER_WARNING}:${git_user_warning}"
    )

    print -n -- ${(pj.\t.)chunks}
  } always {
    exec {fd_git_user}>&-
    exec {fd_gh_user}>&-
  }
}

prompt_zen_pwd() {
  emulate -L zsh
  setopt EXTENDED_GLOB

  # https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-glob-operators
  local git_match=((../)#.git(#qN))

  if (( $+git_match[1] )); then
    local git_root=${git_match[1]:A:h}
    print -rn -- ${git_root:t}${PWD#$git_root}
  else
    print -rn -- ${(%):-%~}
  fi
}

prompt_zen_async_callback() {
  local fd=$1

  {
    zle -F $fd

    local REPLY
    read -ru $fd
    [[ -z $REPLY ]] &&
      return

    local segment
    for segment in ${(ps:\t:)REPLY}; do
      local chunks=(${(s.:.)segment})

      local idx=${chunks[1]}
      local value=${chunks[2]}

      psvar[$idx]=$value
    done

    zle && [[ $CONTEXT == start ]] &&
      zle reset-prompt
  } always {
    exec {fd}>&-
  }
}

prompt_zen_setup "$@"

# vim: set ft=zsh:

__DISPLAYING_INSTANT_PS1=0

__PSVAR_IDX_PWD=1
__PSVAR_IDX_GIT_BRANCH=2
__PSVAR_IDX_GIT_DIRTY=3
__PSVAR_IDX_GIT_REMOTE_AHEAD=4
__PSVAR_IDX_GIT_REMOTE_BEHIND=5
__PSVAR_IDX_GIT_NO_MERGES=6
__PSVAR_IDX_GIT_USER=7
__PSVAR_IDX_GIT_USER_WARNING=8
__PSVAR_IDX_IS_REMOTE=9

prompt_zen_help() {
  cat <<'EOF'
Usage:
  prompt zen [instant-pre|instant-post]
EOF
}

prompt_zen_setup() {
  emulate -L zsh
  autoload -Uz add-zsh-hook

  # https://gist.github.com/romkatv/8b318a610dc302bdbe1487bb1847ad99
  case $1 in
    (instant-pre)
      [[ -t 0 && -t 1 && -t 2 ]] || return

      unsetopt PROMPT_CR PROMPT_SP

      __clear_instant_ps1() {
        setopt PROMPT_CR PROMPT_SP
        print -rn $'\e[?25l\e8\e[0m\e[J\e[?25h'
        add-zsh-hook -d precmd __clear_instant_ps1
        unfunction __clear_instant_ps1
        __DISPLAYING_INSTANT_PS1=0
      }

      print -rn -- $'\e7'${(%):-"
%F{12}$(prompt_zen_pwd)%f
%F{8}❯%f "}

      __DISPLAYING_INSTANT_PS1=1
      return
      ;;
    (instant-post)
      (( __DISPLAYING_INSTANT_PS1 )) || return
      add-zsh-hook precmd __clear_instant_ps1
      ;;
  esac

  setopt EXTENDED_GLOB
  autoload -Uz evalcache

  add-zsh-hook precmd prompt_zen_precmd
  zle -N prompt_zen_async_callback

  if (( __DISPLAYING_INSTANT_PS1 )); then
    # PROMPT_CR と PROMPT_SP は __clear_instant_ps1() で有効化されるので、ここではセットしない
    # セットするとインスタントプロンプト消去時に PROMPT_EOL_MARK が表示されて表示が崩れてしまう
    prompt_opts=(percent)
  else
    prompt_opts=(cr sp percent)
  fi

  local OSC_133_A=$'\e]133;A;\a'
  local OSC_133_B=$'\e]133;B;\a'
  local OSC_133_D=$'\e]133;D;\a'
  local SGR_DIM_START=$'\e[2m'
  local SGR_DIM_RESET=$'\e[22m'

  local segment_pwd="%(${__PSVAR_IDX_IS_REMOTE}V.%F{4}%n@%m%f %F{8}in%f .)%F{12}%${__PSVAR_IDX_PWD}v%f"

  local segment_git_branch="%(${__PSVAR_IDX_GIT_BRANCH}V.%F{5}%${__PSVAR_IDX_GIT_BRANCH}v%f.)"
  local segment_git_dirty="%(${__PSVAR_IDX_GIT_DIRTY}V.%F{15}*%f.)"

  local segment_git_no_merges="%(${__PSVAR_IDX_GIT_NO_MERGES}V.%{${SGR_DIM_START}%}%F{3}⫯%f%{${SGR_DIM_RESET}%} .)"
  local segment_git_remote_ahead="%(${__PSVAR_IDX_GIT_REMOTE_AHEAD}V.%{${SGR_DIM_START}%}%F{6}⇡%f%{${SGR_DIM_RESET}%}.)"
  local segment_git_remote_behind="%(${__PSVAR_IDX_GIT_REMOTE_BEHIND}V.%{${SGR_DIM_START}%}%F{6}⇣%f%{${SGR_DIM_RESET}%}.)"
  local segment_git_remote_space="%(${__PSVAR_IDX_GIT_NO_MERGES}V. .%(${__PSVAR_IDX_GIT_REMOTE_AHEAD}V. .%(${__PSVAR_IDX_GIT_REMOTE_BEHIND}V. .)))"

  local segment_git="%(${__PSVAR_IDX_GIT_BRANCH}V. %F{8}on%f ${segment_git_branch}${segment_git_dirty}${segment_git_remote_space}${segment_git_no_merges}${segment_git_remote_ahead}${segment_git_remote_behind}.)"

  PS1="%{${OSC_133_D}%}
%{${OSC_133_A}%}${segment_pwd}${segment_git}
%(?.%F{8}.%F{9})%(!.#.❯)%f %{${OSC_133_B}%}"

  RPS1="%(${__PSVAR_IDX_GIT_USER_WARNING}V.%F{1}.%F{8})%{${SGR_DIM_START}%}%(${__PSVAR_IDX_GIT_USER}V.%${__PSVAR_IDX_GIT_USER}v.)%{${SGR_DIM_RESET}%}%f"

  # https://news.ycombinator.com/item?id=26757438
  # https://www.reddit.com/r/zsh/comments/c160o2/comment/erbdiqj/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
  zle_highlight+=(paste:none)

  evalcache ~/.local/libexec/vivid-compat iceberg-dark

  zstyle ':completion:*' list-separator '│'
  zstyle ':completion:*' list-colors ${(s.:.)${LS_COLORS/no=([^:])#/}} 'no=0;38;5;8' 'ma=0;38;5;0;48;5;8'

  # see: https://gist.github.com/sheepla/d1ff1ef11cc21dcc7434a25a012a970f
  export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS"
    --prompt '❯ '
    --color gutter:-1
    --color prompt:8
    --color info:8
    --color header:8
    --color border:0
    --color pointer:8
    --color marker:3
    --color fg:-1
    --color bg:-1
    --color fg+:-1
    --color bg+:0
    --color hl:1
    --color hl+:1
  "

  export BAT_THEME="iceberg"

  ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=black,bold"

  # Set only when f-sy-h theme is not set
  # https://github.com/zdharma-continuum/fast-syntax-highlighting/issues/44#issuecomment-1399581264
  local current_fsh_theme
  zstyle -g current_fsh_theme ':plugin:fast-syntax-highlighting' theme
  if [[ "$current_fsh_theme" != "zen" ]]; then
    fast-theme $XDG_CONFIG_HOME/fsh/zen.ini 2>&1 >/dev/null
  fi
}

prompt_zen_precmd() {
  {
    psvar=()
    psvar[$__PSVAR_IDX_PWD]="$(prompt_zen_pwd)"
    psvar[$__PSVAR_IDX_IS_REMOTE]=${REMOTE_CONTAINERS:+1}

    local fd_main fd_sub

    exec {fd_main}< <(prompt_zen_async_git-stauts)
    zle -Fw $fd_main prompt_zen_async_callback

    exec {fd_sub}< <(prompt_zen_async_git-user)
    zle -Fw $fd_sub prompt_zen_async_callback
  } always {
    # Ensure next hook will run
    # see: https://zsh.sourceforge.io/Doc/Release/Functions.html#index-hook-functions
    :
  }
}

prompt_zen_async_git-stauts() {
  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    return
  fi

  emulate -L zsh
  setopt EXTENDED_GLOB

  local fd_git_status fd_git_no_merges

  {
    exec {fd_git_status}< <(
      # Avoid index update (i.e. .git/index.lock remain)
      # see: https://git-scm.com/docs/git-status#_background_refresh
      git --no-optional-locks status --branch --porcelain=2 -unormal 2>/dev/null
    )

    local statuses=("${(f)"$(<&${fd_git_status})"}")
    local current_branch=${statuses[(r)\# branch.head *]#\# branch.head }

    # Depends $current_branch
    exec {fd_git_no_merges}< <(
      # Git aliases was very slow
      # local base_branch=$(git base-branch 2>/dev/null)
      local base_branch=$(git config "branch.${current_branch}.base" 2>/dev/null)

      if [[ -n "$base_branch" ]]; then
        local count=$(git rev-list --no-merges --count ${base_branch}..HEAD)
        if (( count > 0 )); then
          echo $count
        fi
      fi
    )

    local dirty=${${statuses:#\# *}:+1}
    local branch_ab=${statuses[(r)\# branch.ab *]}
    local ahead=${branch_ab[(ws. .r)+[1-9][0-9]#]#+}
    local behind=${branch_ab[(ws. .r)-[1-9][0-9]#]#-}
    local no_merges=$(<&${fd_git_no_merges})

    local chunks=(
      "${__PSVAR_IDX_GIT_BRANCH}:${current_branch}"
      "${__PSVAR_IDX_GIT_DIRTY}:${dirty}"
      "${__PSVAR_IDX_GIT_REMOTE_AHEAD}:${ahead}"
      "${__PSVAR_IDX_GIT_REMOTE_BEHIND}:${behind}"
      "${__PSVAR_IDX_GIT_NO_MERGES}:${no_merges}"
    )

    print -n -- ${(pj.\t.)chunks}
  } always {
    exec {fd_git_status}>&-
    exec {fd_git_no_merges}>&-
  }
}

prompt_zen_async_git-user() {
  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    return
  fi

  local fd_git_user fd_gh_user

  {
    exec {fd_git_user}< <(
      git config --local user.name 2>/dev/null
    )

    exec {fd_gh_user}< <(
      $GLOBAL_AQUA_ROOT_DIR/bin-copied/yq '."github.com".user' $XDG_CONFIG_HOME/gh/hosts.yml 2>/dev/null
    )

    local git_user=$(<&${fd_git_user})
    local gh_user=$(<&${fd_gh_user})

    local git_user_warning=
    if [[ "$git_user" != "$gh_user" ]]; then
      git_user_warning=1
    fi

    local chunks=(
      "${__PSVAR_IDX_GIT_USER}:${git_user}"
      "${__PSVAR_IDX_GIT_USER_WARNING}:${git_user_warning}"
    )

    print -n -- ${(pj.\t.)chunks}
  } always {
    exec {fd_git_user}>&-
    exec {fd_gh_user}>&-
  }
}

prompt_zen_pwd() {
  emulate -L zsh
  setopt EXTENDED_GLOB

  # https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-glob-operators
  local git_match=((../)#.git(#qN))

  if (( $+git_match[1] )); then
    local git_root=${git_match[1]:A:h}
    print -rn -- ${git_root:t}${PWD#$git_root}
  else
    print -rn -- ${(%):-%~}
  fi
}

prompt_zen_async_callback() {
  local fd=$1

  {
    zle -F $fd

    local REPLY
    read -ru $fd
    [[ -z $REPLY ]] &&
      return

    local segment
    for segment in ${(ps:\t:)REPLY}; do
      local chunks=(${(s.:.)segment})

      local idx=${chunks[1]}
      local value=${chunks[2]}

      psvar[$idx]=$value
    done

    zle && [[ $CONTEXT == start ]] &&
      zle reset-prompt
  } always {
    exec {fd}>&-
  }
}

prompt_zen_setup "$@"
